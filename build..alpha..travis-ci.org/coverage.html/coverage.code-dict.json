{"/home/travis/build/npmtest/node-npmtest-shx/test.js":"/* istanbul instrument in package npmtest_shx */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-shx/lib.npmtest_shx.js":"/* istanbul instrument in package npmtest_shx */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_shx = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_shx = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-shx/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-shx && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_shx */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_shx\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_shx.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_shx.rollup.js'] =\n            local.assetsDict['/assets.npmtest_shx.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_shx.__dirname + '/lib.npmtest_shx.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-shx/node_modules/shx/lib/cli.js":"#!/usr/bin/env node\n'use strict';\n\nvar _shx = require('./shx');\n\nvar _minimist = require('minimist');\n\nvar _minimist2 = _interopRequireDefault(_minimist);\n\nvar _config = require('./config');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar parsedArgs = (0, _minimist2.default)(process.argv.slice(2), { stopEarly: true, boolean: true });\n\n// `input` is null if we're running from a TTY, or a string of all stdin if\n// running from the right-hand side of a pipe\nvar run = function run(input) {\n  // Pass stdin to shx as the 'this' parameter\n  var code = _shx.shx.call(input, process.argv);\n\n  // Make sure output is flushed before exiting the process. Please see:\n  //  - https://github.com/shelljs/shx/issues/85\n  //  - https://github.com/mochajs/mocha/issues/333\n  var streamCount = 0;\n  var streams = [process.stdout, process.stderr];\n  streams.forEach(function (stream) {\n    streamCount++; // count each stream\n    stream.write('', function () {\n      streamCount--; // mark each stream as finished\n      if (streamCount === 0) process.exit(code);\n    });\n  });\n};\n\n// ShellJS doesn't support input streams, so we have to collect all input first\nif ((0, _config.shouldReadStdin)(parsedArgs._)) {\n  (function () {\n    // Read all stdin first, and then pass that onto ShellJS\n    var chunks = [];\n    process.stdin.on('data', function (data) {\n      return chunks.push(data);\n    });\n    process.stdin.on('end', function () {\n      return run(chunks.join(''));\n    });\n  })();\n} else {\n  // There's no stdin, so we can immediately invoke the ShellJS function\n  run(null);\n}","/home/travis/build/npmtest/node-npmtest-shx/node_modules/shx/lib/shx.js":"#!/usr/bin/env node\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.shx = shx;\n\nvar _shelljs = require('shelljs');\n\nvar _shelljs2 = _interopRequireDefault(_shelljs);\n\nvar _minimist = require('minimist');\n\nvar _minimist2 = _interopRequireDefault(_minimist);\n\nvar _help = require('./help');\n\nvar _help2 = _interopRequireDefault(_help);\n\nvar _config = require('./config');\n\nvar _printCmdRet = require('./printCmdRet');\n\nvar _path = require('path');\n\nvar _path2 = _interopRequireDefault(_path);\n\nvar _fs = require('fs');\n\nvar _fs2 = _interopRequireDefault(_fs);\n\nvar _es6ObjectAssign = require('es6-object-assign');\n\nvar _es6ObjectAssign2 = _interopRequireDefault(_es6ObjectAssign);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _toArray(arr) { return Array.isArray(arr) ? arr : Array.from(arr); }\n\n_es6ObjectAssign2.default.polyfill(); // modifies the global object\n\n_shelljs2.default.help = _help2.default;\n\nfunction shx(argv) {\n  var parsedArgs = (0, _minimist2.default)(argv.slice(2), { stopEarly: true, boolean: true });\n\n  var _parsedArgs$_ = _toArray(parsedArgs._),\n      fnName = _parsedArgs$_[0],\n      args = _parsedArgs$_.slice(1);\n\n  if (!fnName) {\n    console.error('Error: Missing ShellJS command name');\n    console.error((0, _help2.default)());\n    return _config.EXIT_CODES.SHX_ERROR;\n  }\n\n  // Load ShellJS plugins\n  var CONFIG_PATH = _path2.default.join(process.cwd(), _config.CONFIG_FILE);\n  if (_fs2.default.existsSync(CONFIG_PATH)) {\n    var shxConfig = void 0;\n    try {\n      shxConfig = require(CONFIG_PATH);\n    } catch (e) {\n      throw new Error('Unable to read config file ' + _config.CONFIG_FILE);\n    }\n\n    (shxConfig.plugins || []).forEach(function (pluginName) {\n      try {\n        require(pluginName);\n      } catch (e) {\n        throw new Error('Unable to find plugin \\'' + pluginName + '\\'');\n      }\n    });\n  }\n\n  // validate command\n  if (typeof _shelljs2.default[fnName] !== 'function') {\n    console.error('Error: Invalid ShellJS command: ' + fnName + '.');\n    console.error((0, _help2.default)());\n    return _config.EXIT_CODES.SHX_ERROR;\n  } else if (_config.CMD_BLACKLIST.indexOf(fnName) > -1) {\n    console.error('Warning: shx ' + fnName + ' is not supported');\n    console.error('Please run `shx help` for a list of commands.');\n    return _config.EXIT_CODES.SHX_ERROR;\n  }\n\n  var input = this !== null ? new _shelljs2.default.ShellString(this) : null;\n\n  // Set shell.config with parsed options\n  Object.assign(_shelljs2.default.config, parsedArgs);\n\n  // Workaround for sed syntax\n  var newArgs = void 0;\n  var ret = void 0;\n  if (fnName === 'sed') {\n    (function () {\n      newArgs = [];\n      var lookingForSubstString = true;\n      args.forEach(function (arg) {\n        var match = arg.match(/^s\\/((?:\\\\\\/|[^\\/])+)\\/((?:\\\\\\/|[^\\/])*)\\/(g?)$/);\n        if (match && lookingForSubstString) {\n          var regexString = match[1].replace(/\\\\\\//g, '/');\n          var replacement = match[2].replace(/\\\\\\//g, '/').replace(/\\\\./g, '.');\n          var regexFlags = match[3];\n          newArgs.push(new RegExp(regexString, regexFlags));\n          newArgs.push(replacement);\n          lookingForSubstString = false;\n        } else {\n          newArgs.push(arg);\n        }\n      });\n      ret = _shelljs2.default[fnName].apply(input, newArgs);\n    })();\n  } else {\n    ret = _shelljs2.default[fnName].apply(input, args);\n  }\n  if (ret === null) ret = _shelljs2.default.ShellString('', '', 1);\n\n  /* instanbul ignore next */\n  var code = ret.hasOwnProperty('code') && ret.code;\n\n  if ((fnName === 'pwd' || fnName === 'which') && !ret.match(/\\n$/) && ret.length > 1) {\n    ret += '\\n';\n  }\n\n  // echo already prints\n  if (fnName !== 'echo') (0, _printCmdRet.printCmdRet)(ret);\n  if (typeof ret === 'boolean') {\n    code = ret ? 0 : 1;\n  }\n\n  if (typeof code === 'number') {\n    return code;\n  } else if (_shelljs2.default.error()) {\n    return _config.EXIT_CODES.CMD_FAILED;\n  }\n\n  return _config.EXIT_CODES.SUCCESS;\n}","/home/travis/build/npmtest/node-npmtest-shx/node_modules/shx/lib/help.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _shelljs = require('shelljs');\n\nvar _shelljs2 = _interopRequireDefault(_shelljs);\n\nvar _config = require('./config');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = function () {\n  var commandList = Object.keys(_shelljs2.default).filter(function (cmd) {\n    return typeof _shelljs2.default[cmd] === 'function' && _config.CMD_BLACKLIST.indexOf(cmd) === -1;\n  });\n\n  return '\\nshx: A wrapper for shelljs UNIX commands.\\n\\nUsage: shx <command> [options]\\n\\nExample:\\n\\n    $ shx ls .\\n    foo.txt\\n    bar.txt\\n    baz.js\\n    $ shx rm -rf *.txt\\n    $ shx ls .\\n    baz.js\\n\\nCommands:\\n\\n' + commandList.map(function (cmd) {\n    return '    - ' + cmd;\n  }).join('\\n') + '\\n';\n};","/home/travis/build/npmtest/node-npmtest-shx/node_modules/shx/lib/config.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.shouldReadStdin = exports.SHELLJS_PIPE_INFO = exports.CONFIG_FILE = exports.CMD_BLACKLIST = exports.EXIT_CODES = undefined;\n\nvar _minimist = require('minimist');\n\nvar _minimist2 = _interopRequireDefault(_minimist);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar EXIT_CODES = exports.EXIT_CODES = {\n  SHX_ERROR: 27, // https://xkcd.com/221/\n  CMD_FAILED: 1, // TODO: Once shelljs/shelljs#269 lands, use `error()`\n  SUCCESS: 0\n};\n\nvar CMD_BLACKLIST = exports.CMD_BLACKLIST = ['cd', 'pushd', 'popd', 'dirs', 'set', 'exit', 'exec', 'ShellString'];\n\nvar CONFIG_FILE = exports.CONFIG_FILE = '.shxrc.json';\n\nvar SHELLJS_PIPE_INFO = exports.SHELLJS_PIPE_INFO = {\n  cat: { minArgs: 1 },\n  grep: { minArgs: 2 },\n  head: { minArgs: 1 },\n  sed: { minArgs: 2 },\n  sort: { minArgs: 1 },\n  tail: { minArgs: 1 },\n  uniq: { minArgs: 1 }\n};\n\n// All valid options\nvar allOptionsList = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'.split('');\n\nvar shouldReadStdin = exports.shouldReadStdin = function shouldReadStdin(args) {\n  var cmd = args[0];\n  var cmdInfo = SHELLJS_PIPE_INFO[cmd];\n  var parsedArgs = (0, _minimist2.default)(args.slice(1), {\n    stopEarly: true,\n    boolean: allOptionsList });\n  var requiredNumArgs = cmdInfo ? cmdInfo.minArgs : -1;\n\n  // If a non-boolean option is passed in, incrememnt the required argument\n  // count (this is the case for `-n` for `head` and `tail`)\n  if (parsedArgs.n && (cmd === 'head' || cmd === 'tail')) {\n    requiredNumArgs++;\n  }\n\n  return Boolean(!process.stdin.isTTY && parsedArgs._.length < requiredNumArgs);\n};","/home/travis/build/npmtest/node-npmtest-shx/node_modules/shx/lib/printCmdRet.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n// This function takes the raw result of a shelljs command and figures out how to print it.\n// Invoke this *REGARDLESS* of what the command returns, it will figure it out.\nvar printCmdRet = exports.printCmdRet = function printCmdRet(ret) {\n  // Don't print these types\n  if (typeof ret === 'boolean' || !ret) return;\n\n  if (typeof ret.stdout === 'string') {\n    process.stdout.write(ret.stdout);\n  } else {\n    process.stdout.write(ret);\n  }\n};"}